WARNING: the ResourcefulRoutes plugin is experimental. The API might
change in the future. Looking at the ResourcefulRoutes plugin source code
can give you a deeper understanding of how plugins and helpers work in
Mojolicious and it also provides you with a suggestion how to create a bunch
of RESTful routes with a single command.

NOTE: use the latest Github version of mojolicious, as code is changing quickly!


ResourcefulRoutes Summary
---------------------------

In many cases, you have to create the same template and route structures and controller methods again and again.

For example, in order to manage a list of users, you need routes, controller methods and templates to
    - to list all users,
    - to display information on a single user and
    - to create, update and delete users.

ResourcefulRoutes helps you to set up a controller, template files and routes with a few commands.


ResourcefulRoutes in action
---------------------------

1.) Install ResourcefulRoutes, using cpanminus, this is just

    cpanm http://github.com/forwardever/mojolicious-plugin-resourceful_routes/tarball/master

2.) Create a Mojolicious app:

    mojolicious generate app Test

3.) Switch to the newly created Test app:

    cd Test

4.) Set the correct namespace

Information on routes can now be found in the Test.pm file in the /lib folder.
Now set the desired namespace for the controller files. As we want all of our
controllers to be located under

    /lib/Test/Controllers (namespace Test::Controllers)

we add

    $self->routes->namespace("Test::Controllers");

to the beginning of the startup method in the routes file.


5.) Create a resource names "users"

Make sure that you are still in the Test folder (NOT the lib folder).

    perl script/test generate resource users first_name:string last_name:string description:text


The following files have been created by ResourcefulRoutes (using standard mojolicious config):

    /test/lib/Test/Controllers/Users.pm  # Controller file
    /test/templates/layouts/resourceful_layout.html.ep
    /test/templates/users
    /test/templates/users/index.html.ep
    /test/templates/users/show.html.ep
    /test/templates/users/create_form.html.ep
    /test/templates/users/update_form.html.ep

6.) Create a resource in the routes file located at "/test/lib/Test.pm"
by adding to the startup method:

    $self->plugin('resourceful_routes');
    $self->resources('users');

Also remove the existing routes!

$self->resources('users') automatically generates the following routes
on each start of your app:

        # GET /users/new - form to create a user
        $r->route('/users/new')->via('get')
          ->to(controller => 'users', action => 'create_form')
          ->name('users_create_form');

        # GET /users/123 - show user with id 123
        $r->route('/users/:id')->via('get')
          ->to(controller => 'users', action => 'show')->name('users_show');

        # GET /users/123/edit - form to update a user
        $r->route('/users/:id/edit')->via('get')
          ->to(controller => 'users', action => 'update_form')
          ->name('users_update_form');

        # GET /users - list of all users
        $r->route('/users')->via('get')
          ->to(controller => 'users', action => 'index')
          ->name('users_index');

        # POST /users - create new user
        $r->route('/users')->via('post')
          ->to(controller => 'users', action => 'create')
          ->name('users_create');

        # PUT /users/123 - update an existing user
        $r->route('/users/:id')->via('put')
          ->to(controller => 'users', action => 'update')
          ->name('users_update');

        # DELETE /users/123 - delete an existing user
        $r->route('/users/:id')->via('delete')
          ->to(controller => 'users', action => 'delete')
          ->name('users_delete');


7.) Start your app:

    perl script/test daemon --reload

8.) Enter one of the following URLs to see the result:

    http://localhost:3000/users
    http://localhost:3000/users/123
    http://localhost:3000/users/123/edit
    http://localhost:3000/users/new

9.) Add database access, change template, configure everything as you need it

10.) Note: as PUT and DELETE methods are not supported by old HTML standard, you
have to add a hidden parameter in your update and delete forms:
<input type="hidden" name="_method" value="put" />
<input type="hidden" name="_method" value="delete" />
